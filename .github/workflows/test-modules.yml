name: MaxCLI Module Tests

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]
    schedule:
        # Run tests daily at 2 AM UTC
        - cron: '0 2 * * *'

jobs:
    test:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest]
                python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
                exclude:
                    # Exclude some combinations to reduce job count
                    - os: macos-latest
                      python-version: '3.8'

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Cache pip dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-${{ matrix.python-version }}-
                      ${{ runner.os }}-pip-

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install -r requirements-dev.txt

            - name: Install MaxCLI in development mode
              run: pip install -e .

            - name: Lint with flake8
              run: |
                  # Stop the build if there are Python syntax errors or undefined names
                  flake8 maxcli/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
                  # Treat all errors as warnings. The GitHub editor is 127 chars wide
                  flake8 maxcli/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

            - name: Type check with mypy
              run: mypy maxcli/ --ignore-missing-imports

            - name: Run unit tests
              run: pytest tests/unit/ -v --cov=maxcli --cov-report=xml --cov-report=term-missing --cov-fail-under=0

            - name: Run integration tests
              run: pytest tests/integration/ -v

    docker-tests:
        runs-on: ubuntu-latest
        needs: test
        if: github.event_name != 'schedule' # Skip Docker tests on scheduled runs

        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Set up Python 3.11
              uses: actions/setup-python@v4
              with:
                  python-version: '3.11'

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install -r requirements-dev.txt
                  pip install -e .

            - name: Start Docker service
              run: sudo systemctl start docker

            - name: Run Docker module tests
              run: pytest tests/unit/test_docker_manager.py -v --cov=maxcli.modules.docker_manager --cov-fail-under=0

            - name: Run Docker integration tests
              run: |
                  # Run Docker-specific integration tests using marker
                  if command -v docker &> /dev/null; then
                    pytest tests/integration/ -v --no-cov -m docker
                  else
                    echo "Docker not available, skipping Docker integration tests"
                  fi

    security-scan:
        runs-on: ubuntu-latest
        needs: test

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python 3.11
              uses: actions/setup-python@v4
              with:
                  python-version: '3.11'

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install -r requirements-dev.txt
                  pip install bandit safety

            - name: Security scan with bandit
              run: bandit -r maxcli/ -f json -o bandit-report.json || true

            - name: Check dependencies with safety
              run: |
                  # Check for known security vulnerabilities (may fail if service unavailable)
                  safety check --json --output safety-report.json || echo "Safety check failed or service unavailable"

            - name: Upload security reports
              uses: actions/upload-artifact@v4
              with:
                  name: security-reports
                  path: |
                      bandit-report.json
                      safety-report.json

    performance-tests:
        runs-on: ubuntu-latest
        needs: test
        if: github.event_name != 'schedule'

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python 3.11
              uses: actions/setup-python@v4
              with:
                  python-version: '3.11'

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install -r requirements-dev.txt
                  pip install -e .

            - name: Run performance tests
              run: |
                  # Basic performance tests
                  time python -c "from maxcli.modules.module_manager import load_modules_config; config = load_modules_config(); print('Config loaded')"
                  time python -c "from maxcli.cli import main; print('CLI imported successfully')"

            - name: Memory usage test
              run: |
                  python -c "
                  import psutil
                  import os
                  from maxcli.cli import create_parser

                  process = psutil.Process(os.getpid())
                  initial_memory = process.memory_info().rss / 1024 / 1024  # MB

                  parser = create_parser()

                  final_memory = process.memory_info().rss / 1024 / 1024  # MB
                  memory_usage = final_memory - initial_memory

                  print(f'Memory usage: {memory_usage:.2f} MB')

                  # Warn if memory usage is excessive (>100MB for basic setup)
                  if memory_usage > 100:
                      print(f'WARNING: High memory usage detected: {memory_usage:.2f} MB')
                      print('This may indicate a memory leak or inefficient imports')
                      # Don't fail the build, just warn
                  else:
                      print('✅ Memory usage is within acceptable limits')
                  "

    test-coverage:
        runs-on: ubuntu-latest
        needs: test

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python 3.11
              uses: actions/setup-python@v4
              with:
                  python-version: '3.11'

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install -r requirements-dev.txt
                  pip install -e .

            - name: Run full test suite with coverage
              run: |
                  pytest tests/ --cov=maxcli --cov-report=html --cov-report=xml --cov-report=term-missing --cov-fail-under=0

            - name: Generate coverage report (informational only)
              run: |
                  # Generate coverage report for information - no failure on low coverage
                  coverage report || echo "Coverage report generated (no minimum threshold enforced)"

            - name: Upload coverage reports
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-reports
                  path: |
                      htmlcov/
                      coverage.xml

    validate-modules:
        runs-on: ubuntu-latest
        needs: test

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python 3.11
              uses: actions/setup-python@v4
              with:
                  python-version: '3.11'

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install -r requirements-dev.txt
                  pip install -e .

            - name: Validate module configurations
              run: |
                  python -c "
                  from maxcli.modules.module_manager import load_modules_config, get_available_modules
                  import json

                  config = load_modules_config()
                  available = get_available_modules()

                  print('Available modules:')
                  for name in available:
                      print(f'  {name}')
                      
                  print('✅ Module configuration loaded successfully')
                  "

            - name: Test CLI help generation
              run: |
                  # Test that help can be generated without errors
                  python -c "from maxcli.cli import main; print('CLI can be imported')"
                  python -c "from maxcli.cli import create_parser; parser = create_parser(); print('Parser created successfully')"
